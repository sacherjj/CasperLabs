---

#NOTE: Leaving these here to try again eventually. The Yaml library drone 1.1.0
# uses has a bug with how it handles these anchors. Workaround is to be more
# verbose in the steps.
#
#__buildenv:
#  image: "casperlabs/buildenv:latest"
#
#__sbtenv:
#  environment:
#    - "_JAVA_OPTIONS=-Xms2G -Xmx2G -XX:MaxMetaspaceSize=1G"
#  image: "casperlabs/buildenv:latest"
#  volumes:
#    - "/var/cache/cl-build/.sbt:/root/.sbt"
#    - "/var/cache/cl-build/.ivy2:/root/.ivy2"
#
branches:
  - dev
  - master
  - release-*
  - testing*
  - trying
  - staging

# Begin
clone:
  git-clone:
    commands: |
      set -ex
      git clone -b ${DRONE_TAG:-$DRONE_BRANCH} $DRONE_REMOTE_URL .
      if [ x$DRONE_PULL_REQUEST != x ]; then
          git fetch origin refs/pull/$DRONE_PULL_REQUEST/head
          EMAIL=ci git merge --no-edit FETCH_HEAD
      fi
      git rev-parse HEAD
    image: "casperlabs/buildenv:latest"

#NOTE: 1. Had to remove cached .sbt/.ivy2 dirs for drone autoscaling. This is because
# drone uses docker bind mounts which do not create the host dir if it is nonexistent,
# resulting in Error response from daemon: invalid mount config for type "bind":
# bind source path does not exist: /var/cache/cl-build/.sbt
#      2. Groups were replaced for a new depends_on feature in 1.*. These do not behave
# exactly the same.
pipeline:

# Below is for pull_request webhooks only
  sbt-compile-test-pr:
    commands:
      - "sbt test"
    environment:
      - "_JAVA_OPTIONS=-Xms2G -Xmx2G -XX:MaxMetaspaceSize=1G"
    image: "casperlabs/buildenv:latest"
    when:
      event:
        - pull_request

  git-status-post-scala-compile-pr:
    commands: |
      STATUS_CHECK=$(git status)
      if echo $STATUS_CHECK | grep -q "modified" ; then echo "$STATUS_CHECK"; exit 1; fi
    image: "casperlabs/buildenv:latest"
    when:
      event:
        - pull_request

  rust-compile-test-pr:
    environment:
      - "CARGO_FLAGS=--locked"
    commands:
      - "cd execution-engine"
      - "rustup target add --toolchain $(cat rust-toolchain) wasm32-unknown-unknown"
      - "make test test-contracts"
      - "cd ../long-running-tests"
      - "./build-contracts.sh"
    image: "casperlabs/buildenv:latest"
    when:
      event:
        - pull_request

  run-cargo-fmt-pr:
    commands:
      - "cd execution-engine"
      - "~/.cargo/bin/rustup toolchain install $(cat rust-toolchain)"
      - "~/.cargo/bin/rustup component add --toolchain=$(cat rust-toolchain) rustfmt"
      - "make check-format"
    image: "casperlabs/buildenv:latest"
    when:
      event:
        - pull_request

  run-rust-lints-pr:
    commands:
      - "cd execution-engine"
      - "~/.cargo/bin/rustup toolchain install $(cat rust-toolchain)"
      - "~/.cargo/bin/rustup component add --toolchain=$(cat rust-toolchain) clippy"
      - "make lint"
    image: "casperlabs/buildenv:latest"
    when:
      event:
        - pull_request
  black-and-flake8:
    commands:
      - "python3 -m pip install pipenv"
      - "cd integration-testing"
      - "./run_flake8_black.sh"
    image: "casperlabs/buildenv:latest"
    when:
      event:
        - pull_request

# This section is for bors' branches only
  sbt-test-docker-bors:
    commands:
      - "sbt test"
      - "make docker-build/node docker-build/client"
    environment:
      - "_JAVA_OPTIONS=-Xms2G -Xmx2G -XX:MaxMetaspaceSize=1G"
    image: "casperlabs/buildenv:latest"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    when:
      branch:
        - staging
        - trying

  git-status-post-scala-compile-bors:
    commands: |
      STATUS_CHECK=$(git status)
      if echo $STATUS_CHECK | grep -q "modified" ; then echo "$STATUS_CHECK"; exit 1; fi
    image: "casperlabs/buildenv:latest"
    when:
      branch:
        - staging
        - trying

  rust-compile-test-bors:
    environment:
      - "CARGO_FLAGS=--locked"
    commands:
      - "cd execution-engine"
      - "make test"
    image: "casperlabs/buildenv:latest"
    when:
      branch:
        - staging
        - trying

  run-cargo-fmt-bors:
    commands:
      - "cd execution-engine"
      - "~/.cargo/bin/rustup toolchain install $(cat rust-toolchain)"
      - "~/.cargo/bin/rustup component add --toolchain=$(cat rust-toolchain) rustfmt"
      - "make check-format"
    image: "casperlabs/buildenv:latest"
    when:
      branch:
        - staging
        - trying

  run-rust-lints-bors:
    commands:
      - "cd execution-engine"
      - "~/.cargo/bin/rustup toolchain install $(cat rust-toolchain)"
      - "~/.cargo/bin/rustup component add --toolchain=$(cat rust-toolchain) clippy"
      - "make lint"
    image: "casperlabs/buildenv:latest"
    when:
      branch:
        - staging
        - trying

  try-cargo-publish-bors:
    commands:
      - "cd execution-engine"
      - "make check-publish"
    image: "casperlabs/buildenv:latest"
    when:
      branch:
        - staging
        - trying

  run-rust-benchmarks-bors:
    commands:
      - "cd execution-engine"
      - "make bench"
    image: "casperlabs/buildenv:latest"
    when:
      branch:
        - staging
        - trying

  docker-build-ee-int-bors:
    commands:
      - "export DOCKER_LATEST_TAG=DRONE-${DRONE_BUILD_NUMBER}"
      - "./integration-testing/contracts/build_contracts.sh"
      - "make docker-build/execution-engine"
      - "make docker-build/integration-testing"
      - "make docker-build/key-generator"
      - "make docker-build/explorer"
    environment:
      - "_JAVA_OPTIONS=-Xms2G -Xmx2G -XX:MaxMetaspaceSize=1G"
    image: "casperlabs/buildenv:latest"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    when:
      branch:
        - staging
        - trying

  docker-keys-gen-test-bors:
    commands:
      - "mkdir /tmp/keys-DRONE-${DRONE_BUILD_NUMBER}"
      - "./hack/key-management/docker-gen-keys.sh /tmp/keys-DRONE-${DRONE_BUILD_NUMBER} --test"
      - "rm -rf /tmp/keys-DRONE-${DRONE_BUILD_NUMBER}"
    image: "casperlabs/buildenv:latest"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "/tmp:/tmp"
    when:
      branch:
        - staging
        - trying

  run-integration-tests:
    commands:
      - "apt-get update && apt-get -y install gcc"
      - "python3 -m pip install pipenv pytest dataclasses typing_extensions dataclasses grpcio grpcio_tools protobuf in-place ed25519 pyblake2"
      - "cd integration-testing"
      - "./docker_run_tests.sh"
    environment:
      - "_JAVA_OPTIONS=-Xms2G -Xmx2G -XX:MaxMetaspaceSize=1G"
    image: "casperlabs/buildenv:latest"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "/tmp:/tmp"
    when:
      branch:
        - staging
        - trying

# The below section is for post-bors push webhooks
  rust-compile-for-make:
    environment:
      - "CARGO_FLAGS=--locked"
    commands:
      - "cd execution-engine"
      - "make build"
    image: "casperlabs/buildenv:latest"
    when:
      branch:
        - dev
        - release-*
        - master
      event:
        - push
        - tag

  docker-build-ee-merge:
    commands:
      - "export DOCKER_LATEST_TAG=DRONE-${DRONE_BUILD_NUMBER}"
      - "make docker-build/execution-engine"
    environment:
      - "_JAVA_OPTIONS=-Xms2G -Xmx2G -XX:MaxMetaspaceSize=1G"
    image: "casperlabs/buildenv:latest"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    when:
      branch:
        - dev
        - release-*
        - master
      event:
        - push
        - tag

  docker-key-gen-merge:
    commands:
      - "export DOCKER_LATEST_TAG=DRONE-${DRONE_BUILD_NUMBER}"
      - "make docker-build/key-generator"
    image: "casperlabs/buildenv:latest"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    when:
      branch:
        - dev
        - release-*
        - master
      event:
        - push
        - tag

  docker-explorer-merge:
    commands:
      - "export DOCKER_LATEST_TAG=DRONE-${DRONE_BUILD_NUMBER}"
      - "make docker-build/explorer"
    image: "casperlabs/buildenv:latest"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    when:
      branch:
        - dev
        - release-*
        - master
      event:
        - push
        - tag

  docker-grpcwebproxy-merge:
    commands:
      - "export DOCKER_LATEST_TAG=DRONE-${DRONE_BUILD_NUMBER}"
      - "make docker-build/grpcwebproxy"
    image: "casperlabs/buildenv:latest"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    when:
      branch:
        - dev
        - release-*
        - master
      event:
        - push
        - tag

  package-sbt-artifacts-merge:
    commands:
      - "make clean"
      - "make build-client-contracts"
      - "sbt update test client/debian:packageBin client/universal:packageZipTarball client/rpm:packageBin node/debian:packageBin node/universal:packageZipTarball node/rpm:packageBin node/docker:publishLocal client/docker:publishLocal"
      - "mkdir -p artifacts/${DRONE_BRANCH}"
      - "cp client/target/casperlabs-client_*_all.deb client/target/universal/*.tgz artifacts/${DRONE_BRANCH}"
      - "cp client/target/rpm/RPMS/noarch/casperlabs-client-*.noarch.rpm artifacts/${DRONE_BRANCH}"
      - "cp node/target/casperlabs-node_*_all.deb node/target/universal/*.tgz artifacts/${DRONE_BRANCH}"
      - "cp node/target/rpm/RPMS/noarch/casperlabs-node-*.noarch.rpm artifacts/${DRONE_BRANCH}"
    environment:
      - "_JAVA_OPTIONS=-Xms2G -Xmx2G -XX:MaxMetaspaceSize=1G"
    image: "casperlabs/buildenv:latest"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    when:
      branch:
        - dev
        - release-*
        - master
      event:
        - push
        - tag

  package-ee:
    commands:
      - "mkdir -p artifacts/${DRONE_BRANCH}"
      - "make clean"
      - "make cargo-package-all"
      - "cp execution-engine/target/system-contracts.tar.gz artifacts/${DRONE_BRANCH}"
      - "cp execution-engine/target/debian/casperlabs-engine-grpc-server_*.deb artifacts/${DRONE_BRANCH}"
      - "cp execution-engine/target/release/rpmbuild/RPMS/x86_64/casperlabs-engine-grpc-server-*.rpm artifacts/${DRONE_BRANCH}"
      - "WORKING_DIR=$(pwd) ; cd execution-engine/target/release/rpmbuild/SOURCES ; OS=$(uname -s | tr '[:upper:]' '[:lower:]') ; ARCH=$(uname -p) ; SOURCE=$(ls casperlabs-engine-grpc-server-*.tar.gz | sed \"s/.tar.gz//\") ; TARGET=$(ls $SOURCE*.tar.gz | sed \"s/.tar.gz/_\"$OS\"_\"$ARCH\".tar.gz/\") ; tar -xzf $SOURCE.tar.gz ; tar -czf $TARGET -C $SOURCE/usr/bin/ . && cp $TARGET $WORKING_DIR/artifacts/${DRONE_BRANCH}"
    image: "casperlabs/buildenv:latest"
    when:
      branch:
        - dev
        - release-*
        - master
      event:
        - push
        - tag

  rsync-artifacts:
    delete: true
    hosts:
      - $REPO_HOST
    image: drillster/drone-rsync
    recursive: true
    secrets:
      - repo_host
      - rsync_user
      - rsync_key
      - repo_path
    source: "artifacts/${DRONE_BRANCH}"
    target: $REPO_PATH/
    when:
      branch:
        - dev
        - release-*
        - master
      event:
        - push
        - tag

  github_publish_release_artifacts:
    checksum:
      - sha256
      - md5
    files:
      - "artifacts/${DRONE_BRANCH}/*"
    image: plugins/github-release
    prerelease: true
    secrets:
      - github_token
    when:
      branch: master
      event: tag

  docker-publish:
    commands: |
      echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
      if [ ! -z ${DRONE_TAG} ]; then
        REF=${DRONE_TAG}
      else
        REF=${DRONE_BRANCH}
      fi
      docker tag casperlabs/node:DRONE-${DRONE_BUILD_NUMBER} casperlabs/node:"$REF"
      docker tag casperlabs/client:DRONE-${DRONE_BUILD_NUMBER} casperlabs/client:"$REF"
      docker tag casperlabs/execution-engine:DRONE-${DRONE_BUILD_NUMBER} casperlabs/execution-engine:"$REF"
      docker tag casperlabs/key-generator:DRONE-${DRONE_BUILD_NUMBER} casperlabs/key-generator:"$REF"
      docker tag casperlabs/explorer:DRONE-${DRONE_BUILD_NUMBER} casperlabs/explorer:"$REF"
      docker tag casperlabs/grpcwebproxy:DRONE-${DRONE_BUILD_NUMBER} casperlabs/grpcwebproxy:"$REF"
      docker push casperlabs/node:"$REF"
      docker push casperlabs/client:"$REF"
      docker push casperlabs/execution-engine:"$REF"
      docker push casperlabs/key-generator:"$REF"
      docker push casperlabs/explorer:"$REF"
      docker push casperlabs/grpcwebproxy:"$REF"
      if [ "${DRONE_BRANCH}" = "master" ]; then
        docker tag casperlabs/node:DRONE-${DRONE_BUILD_NUMBER} casperlabs/node:latest
        docker tag casperlabs/client:DRONE-${DRONE_BUILD_NUMBER} casperlabs/client:latest
        docker tag casperlabs/execution-engine:DRONE-${DRONE_BUILD_NUMBER} casperlabs/execution-engine:latest
        docker tag casperlabs/key-generator:DRONE-${DRONE_BUILD_NUMBER} casperlabs/key-generator:latest
        docker tag casperlabs/explorer:DRONE-${DRONE_BUILD_NUMBER} casperlabs/explorer:latest
        docker tag casperlabs/grpcwebproxy:DRONE-${DRONE_BUILD_NUMBER} casperlabs/grpcwebproxy:latest
        docker push casperlabs/node:latest
        docker push casperlabs/client:latest
        docker push casperlabs/execution-engine:latest
        docker push casperlabs/key-generator:latest
        docker push casperlabs/explorer:latest
        docker push casperlabs/grpcwebproxy:latest
      fi
      echo "done"
    image: "casperlabs/buildenv:latest"
    secrets:
      - docker_username
      - docker_password
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    when:
      branch:
        - dev
        - release-*
        - master
      event:
        - push
        - tag

#  push-codecov:
#    secrets: [ codecov_token ]
#    commands:
#      - "codecov -t $CODECOV_TOKEN"
#    image: "casperlabs/buildenv:latest"
#    when:
#      branch:
#        - dev
#        - release-*
#        - master
#      event:
#        - push
#        - tag

  contract-examples:
    fork: true
    image: plugins/downstream
    repositories:
      - CasperLabs/contract-examples@master
    secrets:
      - downstream_token
      - downstream_server
    when:
      branch:
        - dev
        - release-*
        - master
      event:
        - push
        - tag

  cleanup:
    commands:
      - "docker images --filter \"dangling=true\" -q --no-trunc | xargs --no-run-if-empty docker rmi -f || true"
      - "docker images | grep \"DRONE-${DRONE_BUILD_NUMBER}\" | awk '{print $3}' | xargs --no-run-if-empty docker rmi -f || true"
    environment:
      - "_JAVA_OPTIONS=-Xms2G -Xmx2G -XX:MaxMetaspaceSize=1G"
    image: "casperlabs/buildenv:latest"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    when:
      status:
        - failure
        - success

  notify:
    channel: alerts
    image: plugins/slack
    secrets:
      - slack_webhook
    template: |
      *{{ uppercasefirst build.status }}*
        Author: {{ build.author }}
        Drone Build: <{{ build.link }}|#{{ build.number }}>
        Commit Link: <https://github.com/{{repo.owner}}/{{repo.name}}/commit/{{build.commit}}|{{ truncate build.commit 10 }}>
    when:
      status:
        - failure

# Signature for Drone
---
kind: signature
hmac: aba74ddcedb4ac74f39f8884cd644c6f13eb4ed7f7226c7b9fefda17d0241af2

...

---

#NOTE: Leaving these here to try again eventually. The Yaml library drone 1.1.0
# uses has a bug with how it handles these anchors. Workaround is to be more
# verbose in the steps.
#
#__buildenv:
#  image: "casperlabs/buildenv:latest"
#
#__sbtenv:
#  environment:
#    - "_JAVA_OPTIONS=-Xms2G -Xmx2G -XX:MaxMetaspaceSize=1G"
#  image: "casperlabs/buildenv:latest"
#  volumes:
#    - "/var/cache/cl-build/.sbt:/root/.sbt"
#    - "/var/cache/cl-build/.ivy2:/root/.ivy2"
#    - "/var/cache/cl-build/.coursier:/root/.coursier"

# Begin
clone:
  git-clone:
    commands: |
      set -ex
      git clone -b ${DRONE_TAG:-$DRONE_BRANCH} $DRONE_REMOTE_URL .
      if [ x$DRONE_PULL_REQUEST != x ]; then
          git fetch origin refs/pull/$DRONE_PULL_REQUEST/head
          EMAIL=ci git merge --no-edit FETCH_HEAD
      fi
      git rev-parse HEAD
    image: "casperlabs/buildenv:latest"

#NOTE: 1. Had to remove cached .sbt/.ivy2 dirs for drone autoscaling. This is because
# drone uses docker bind mounts which do not create the host dir if it is nonexistent,
# resulting in Error response from daemon: invalid mount config for type "bind":
# bind source path does not exist: /var/cache/cl-build/.sbt
kind: pipeline
name: build-bors-merge

steps:
# Below is for pull_request webhooks only

#NOTE: allowing failures here since we've seen site temporarily go down and cause
# our pipeline to fail.
- name: markdown-link-check
  commands:
  - "ci/markdown-link-check.sh"
  image: "casperlabs/buildenv:latest"
  failure: "ignore"
  when:
    event:
    - pull_request
    changeset:
      includes:
      - "**/.drone.yml"
      - "**/**.md"

- name: sbt-compile-test-pr
  commands:
  - "sbt test"
  environment:
    _JAVA_OPTIONS: "-Xms2G -Xmx2G -XX:MaxMetaspaceSize=1G"
  image: "casperlabs/buildenv:latest"
  when:
    event:
    - pull_request
    changeset:
      includes:
      - "**/.drone.yml"
      - "**/**.scala"
      - "**/**.sbt"
      - "**/**.proto"
      - "**/casperlabs-node.service"

- name: git-status-post-scala-compile-pr
  commands:
  - STATUS_CHECK=$(git status)
  - if echo $STATUS_CHECK | grep -q "modified" ; then echo "$STATUS_CHECK"; exit 1; fi
  image: "casperlabs/buildenv:latest"
  when:
    event:
    - pull_request
    changeset:
      includes:
      - "**/.drone.yml"
      - "**/**.scala"
      - "**/**.sbt"
      - "**/**.proto"
      - "**/casperlabs-node.service"
  depends_on:
  - sbt-compile-test-pr

- name: rust-compile-test-pr
  commands:
  - "cd execution-engine/"
  - "make setup-rs"
  - "make test-rs test-contracts-rs"
  image: "casperlabs/buildenv:latest"
  when:
    event:
    - pull_request
    changeset:
      includes:
      - "**/.drone.yml"
      - "**/**.rs"
      - "**/**.proto"
      - "**/Cargo.lock"
      - "**/Cargo.toml"
      - "**/casperlabs-engine-grpc-server.spec"
      - "**/rustfmt.toml"

- name: rust-compile-test-latest-nightly-pr
  environment:
    CARGO_OPTS: +nightly
  commands:
  - "cd execution-engine/"
  - "make setup-nightly-rs"
  - "make build CARGO_FLAGS=--all-targets"
  - "make build-contracts-rs"
  image: "casperlabs/buildenv:latest"
  failure: "ignore"
  when:
    event:
    - pull_request
    changeset:
      includes:
      - "**/.drone.yml"
      - "**/**.rs"
      - "**/**.proto"
      - "**/Cargo.lock"
      - "**/Cargo.toml"
      - "**/casperlabs-engine-grpc-server.spec"
      - "**/rustfmt.toml"

- name: rust-compile-docs-stable-pr
  commands:
  - "cd execution-engine/"
  - "make setup-stable-rs"
  - "make build-docs-stable-rs"
  image: "casperlabs/buildenv:latest"
  failure: "ignore"
  when:
    event:
    - pull_request
    changeset:
      includes:
      - "**/.drone.yml"
      - "**/**.rs"
      - "**/**.proto"
      - "**/Cargo.lock"
      - "**/Cargo.toml"
      - "**/casperlabs-engine-grpc-server.spec"
      - "**/rustfmt.toml"

- name: as-compile-test-pr
  commands:
  - "cd execution-engine"
  - "make setup"
  - "make build-contracts-rs"
  - "make test-as test-contracts-as"
  image: "casperlabs/buildenv:latest"
  when:
    event:
    - pull_request
    changeset:
      includes:
      - "**/engine-core/**"
      - "**/contract-as/**"
      - "**/contracts-as/**"

- name: run-cargo-fmt-pr
  commands:
  - "cd execution-engine"
  - "~/.cargo/bin/rustup toolchain install $(cat rust-toolchain)"
  - "make check-format"
  image: "casperlabs/buildenv:latest"
  when:
    event:
    - pull_request
    changeset:
      includes:
      - "**/.drone.yml"
      - "**/**.rs"
      - "**/**.proto"
      - "**/Cargo.lock"
      - "**/Cargo.toml"
      - "**/casperlabs-engine-grpc-server.spec"
      - "**/rustfmt.toml"
  depends_on:
  - rust-compile-test-pr

- name: run-rust-lints-pr
  commands:
  - "cd execution-engine"
  - "make setup-rs"
  - "make lint"
  image: "casperlabs/buildenv:latest"
  when:
    event:
    - pull_request
    changeset:
      includes:
      - "**/.drone.yml"
      - "**/**.rs"
      - "**/**.proto"
      - "**/Cargo.lock"
      - "**/Cargo.toml"
      - "**/casperlabs-engine-grpc-server.spec"
      - "**/rustfmt.toml"
  depends_on:
  - rust-compile-test-pr

- name: run-rust-audit-pr
  commands:
  - "cd execution-engine"
  - "make setup-audit"
  - "make audit"
  image: "casperlabs/buildenv:latest"
  when:
    event:
    - pull_request
    changeset:
      includes:
      - "**/.drone.yml"
      - "**/**.rs"
      - "**/**.proto"
      - "**/Cargo.lock"
      - "**/Cargo.toml"
  depends_on:
  - rust-compile-test-pr

# This section is for bors' branches only

#NOTE: allowing failures here since we've seen site temporarily go down and cause
# our pipeline to fail.
- name: markdown-link-check-bors
  commands:
  - "ci/markdown-link-check.sh"
  image: "casperlabs/buildenv:latest"
  failure: "ignore"
  when:
    branch:
    - staging
    - trying
    changeset:
      includes:
      - "**/.drone.yml"
      - "**/**.md"

- name: sbt-test-docker-bors
  commands:
  - "sbt test"
  - "export DOCKER_LATEST_TAG=DRONE-${DRONE_BUILD_NUMBER}"
  - "make docker-build/node"
  environment:
    _JAVA_OPTIONS: "-Xms2G -Xmx2G -XX:MaxMetaspaceSize=1G"
  image: "casperlabs/buildenv:latest"
  volumes:
  - name: docker_sock
    path: "/var/run/docker.sock"
  when:
    branch:
    - staging
    - trying

- name: git-status-post-scala-compile-bors
  commands:
  - STATUS_CHECK=$(git status)
  - if echo $STATUS_CHECK | grep -q "modified" ; then echo "$STATUS_CHECK"; exit 1; fi
  image: "casperlabs/buildenv:latest"
  when:
    branch:
    - staging
    - trying
    changeset:
      includes:
      - "**/.drone.yml"
      - "**/**.scala"
      - "**/**.sbt"
      - "**/**.proto"
      - "**/casperlabs-node.service"
  depends_on:
  - sbt-test-docker-bors

#Adding dependency on sbt due to sbt hanging frequently running in parallel with this step
- name: rust-compile-test-bors
  commands:
  - "cd execution-engine/"
  - "make setup"
  - "make test"
  image: "casperlabs/buildenv:latest"
  when:
    branch:
    - staging
    - trying
  depends_on:
  - sbt-test-docker-bors

# Note: Added the dependency on the sbt step to be finished first because in testing,
# Drone was getting random sbt build failures when too many steps were running simultaneously.
- name: run-cargo-fmt-bors
  commands:
  - "cd execution-engine"
  - "~/.cargo/bin/rustup toolchain install $(cat rust-toolchain)"
  - "make check-format"
  image: "casperlabs/buildenv:latest"
  when:
    branch:
    - staging
    - trying
    changeset:
      includes:
      - "**/.drone.yml"
      - "**/**.rs"
      - "**/**.proto"
      - "**/Cargo.lock"
      - "**/Cargo.toml"
      - "**/casperlabs-engine-grpc-server.spec"
      - "**/rustfmt.toml"
  depends_on:
  - rust-compile-test-bors
  - sbt-test-docker-bors

- name: run-rust-lints-bors
  commands:
  - "cd execution-engine"
  - "make setup-rs"
  - "make lint"
  image: "casperlabs/buildenv:latest"
  when:
    branch:
    - staging
    - trying
    changeset:
      includes:
      - "**/.drone.yml"
      - "**/**.rs"
      - "**/**.proto"
      - "**/Cargo.lock"
      - "**/Cargo.toml"
      - "**/casperlabs-engine-grpc-server.spec"
      - "**/rustfmt.toml"
  depends_on:
  - rust-compile-test-bors
  - sbt-test-docker-bors

- name: run-rust-audit-bors
  commands:
  - "cd execution-engine"
  - "make setup-audit"
  - "make audit"
  image: "casperlabs/buildenv:latest"
  when:
    branch:
    - staging
    - trying
    changeset:
      includes:
      - "**/.drone.yml"
      - "**/**.rs"
      - "**/**.proto"
      - "**/Cargo.lock"
      - "**/Cargo.toml"
  depends_on:
  - rust-compile-test-bors
  - sbt-test-docker-bors

- name: run-rust-benchmarks-bors
  commands:
  - "cd execution-engine"
  - "make setup-rs"
  - "make bench"
  image: "casperlabs/buildenv:latest"
  when:
    branch:
    - staging
    - trying
    changeset:
      includes:
      - "**/.drone.yml"
      - "**/**.rs"
      - "**/**.proto"
      - "**/Cargo.lock"
      - "**/Cargo.toml"
      - "**/casperlabs-engine-grpc-server.spec"
      - "**/rustfmt.toml"
  depends_on:
  - rust-compile-test-bors
  - sbt-test-docker-bors

- name: run-casperlabs-updater-dry-bors
  commands:
  - "cd ci/casperlabs-updater"
  - "cargo run --release -- --dry-run"
  image: "casperlabs/buildenv:latest"
  when:
    branch:
    - staging
    - trying
    changeset:
      includes:
      - "**/.drone.yml"
      - "**/**.rs"
      - "**/**.proto"
      - "**/Cargo.lock"
      - "**/Cargo.toml"
      - "**/ci/casperlabs-updater/**"
  depends_on:
  - rust-compile-test-bors
  - sbt-test-docker-bors

- name: docker-build-ee-bors
  commands:
  - "export DOCKER_LATEST_TAG=DRONE-${DRONE_BUILD_NUMBER}"
  - "make docker-build/execution-engine"
  environment:
    _JAVA_OPTIONS: "-Xms2G -Xmx2G -XX:MaxMetaspaceSize=1G"
  image: "casperlabs/buildenv:latest"
  volumes:
  - name: docker_sock
    path: "/var/run/docker.sock"
  when:
    branch:
    - staging
    - trying
  depends_on:
  - rust-compile-test-bors
  - sbt-test-docker-bors

- name: docker-build-key-bors
  commands:
  - "export DOCKER_LATEST_TAG=DRONE-${DRONE_BUILD_NUMBER}"
  - "make docker-build/key-generator"
  environment:
    _JAVA_OPTIONS: "-Xms2G -Xmx2G -XX:MaxMetaspaceSize=1G"
  image: "casperlabs/buildenv:latest"
  volumes:
  - name: docker_sock
    path: "/var/run/docker.sock"
  when:
    branch:
    - staging
    - trying
    changeset:
      includes:
      - "**/.drone.yml"
      - "hack/key-management/**"
  depends_on:
  - rust-compile-test-bors
  - sbt-test-docker-bors

- name: docker-build-explorer-bors
  commands:
  - "export DOCKER_LATEST_TAG=DRONE-${DRONE_BUILD_NUMBER}"
  - "~/.cargo/bin/rustup toolchain install $(cat execution-engine/rust-toolchain)"
  - "rustup target add --toolchain $(cat execution-engine/rust-toolchain) wasm32-unknown-unknown"
  - "make docker-build/explorer"
  - "make docker-build/grpcwebproxy"
  environment:
    _JAVA_OPTIONS: "-Xms2G -Xmx2G -XX:MaxMetaspaceSize=1G"
  image: "casperlabs/buildenv:latest"
  volumes:
  - name: docker_sock
    path: "/var/run/docker.sock"
  when:
    branch:
    - staging
    - trying
  depends_on:
  - rust-compile-test-bors
  - sbt-test-docker-bors

- name: docker-keys-gen-test-bors
  commands:
  - "mkdir /tmp/keys-DRONE-${DRONE_BUILD_NUMBER}"
  - "./hack/key-management/docker-gen-keys.sh /tmp/keys-DRONE-${DRONE_BUILD_NUMBER} --test"
  - "rm -rf /tmp/keys-DRONE-${DRONE_BUILD_NUMBER}"
  image: "casperlabs/buildenv:latest"
  volumes:
  - name: docker_sock
    path: "/var/run/docker.sock"
  - name: temp
    path: "/tmp"
  when:
    branch:
    - staging
    - trying
    changeset:
      includes:
      - "**/.drone.yml"
      - "hack/key-management/**"
  depends_on:
  - docker-build-key-bors

# The below section is for post-bors push webhooks
- name: rust-compile-for-make
  commands:
  - "cd execution-engine"
  - "make setup-rs"
  - "make build"
  image: "casperlabs/buildenv:latest"
  when:
    branch:
    - dev
    - release-*
    - master
    event:
    - push

- name: docker-build-ee-merge
  commands:
  - "export DOCKER_LATEST_TAG=DRONE-${DRONE_BUILD_NUMBER}"
  - "make setup-rs -C ./execution-engine"
  - "make docker-build/execution-engine"
  environment:
    _JAVA_OPTIONS: "-Xms2G -Xmx2G -XX:MaxMetaspaceSize=1G"
  image: "casperlabs/buildenv:latest"
  volumes:
  - name: docker_sock
    path: "/var/run/docker.sock"
  when:
    branch:
    - dev
    - release-*
    - master
    event:
    - push
  depends_on:
  - rust-compile-for-make

- name: docker-key-gen-merge
  commands:
  - "export DOCKER_LATEST_TAG=DRONE-${DRONE_BUILD_NUMBER}"
  - "make docker-build/key-generator"
  image: "casperlabs/buildenv:latest"
  volumes:
  - name: docker_sock
    path: "/var/run/docker.sock"
  when:
    branch:
    - dev
    - release-*
    - master
    event:
    - push

- name: docker-explorer-merge
  commands:
  - "export DOCKER_LATEST_TAG=DRONE-${DRONE_BUILD_NUMBER}"
  - "make docker-build/explorer"
  image: "casperlabs/buildenv:latest"
  volumes:
  - name: docker_sock
    path: "/var/run/docker.sock"
  when:
    branch:
    - dev
    - release-*
    - master
    event:
    - push

- name: docker-grpcwebproxy-merge
  commands:
  - "export DOCKER_LATEST_TAG=DRONE-${DRONE_BUILD_NUMBER}"
  - "make docker-build/grpcwebproxy"
  image: "casperlabs/buildenv:latest"
  volumes:
  - name: docker_sock
    path: "/var/run/docker.sock"
  when:
    branch:
    - dev
    - release-*
    - master
    event:
    - push

- name: make-clean-before-package
  commands:
  - "make clean"
  environment:
    _JAVA_OPTIONS: "-Xms2G -Xmx2G -XX:MaxMetaspaceSize=1G"
  image: "casperlabs/buildenv:latest"
  when:
    branch:
    - dev
    - release-*
    - master
    event:
    - push
  depends_on:
  - rust-compile-for-make
  - docker-build-ee-merge
  - docker-key-gen-merge
  - docker-explorer-merge
  - docker-grpcwebproxy-merge

- name: package-sbt-artifacts-merge
  commands:
  - "make build-client-contracts build-node-contracts"
  - "rm -rf project/target project/project/target"
  - "sbt update test node/debian:packageBin node/universal:packageZipTarball node/rpm:packageBin"
  - "export DOCKER_LATEST_TAG=DRONE-${DRONE_BUILD_NUMBER}"
  - "make docker-build/node"
  - "mkdir -p artifacts/${DRONE_BRANCH}"
  - "cp node/target/casperlabs-node_*_all.deb node/target/universal/*.tgz artifacts/${DRONE_BRANCH}"
  - "cp node/target/rpm/RPMS/noarch/casperlabs-node-*.noarch.rpm artifacts/${DRONE_BRANCH}"
  environment:
    _JAVA_OPTIONS: "-Xms2G -Xmx2G -XX:MaxMetaspaceSize=1G"
  image: "casperlabs/buildenv:latest"
  volumes:
  - name: docker_sock
    path: "/var/run/docker.sock"
  when:
    branch:
    - dev
    - release-*
    - master
    event:
    - push
  depends_on:
  - make-clean-before-package

- name: package-ee
  commands:
  - "mkdir -p artifacts/${DRONE_BRANCH}"
  - "make setup -C ./execution-engine"
  - "make cargo-package-all"
  - "cp execution-engine/target/system-contracts.tar.gz artifacts/${DRONE_BRANCH}"
  - "cp execution-engine/target/debian/casperlabs-engine-grpc-server_*.deb artifacts/${DRONE_BRANCH}"
  - "cp execution-engine/target/release/rpmbuild/RPMS/x86_64/casperlabs-engine-grpc-server-*.rpm artifacts/${DRONE_BRANCH}"
  - "WORKING_DIR=$(pwd) ; cd execution-engine/target/release/rpmbuild/SOURCES ; OS=$(uname -s | tr '[:upper:]' '[:lower:]') ; ARCH=$(uname -p) ; SOURCE=$(ls casperlabs-engine-grpc-server-*.tar.gz | sed \"s/.tar.gz//\") ; TARGET=$(ls $SOURCE*.tar.gz | sed \"s/.tar.gz/_\"$OS\"_\"$ARCH\".tar.gz/\") ; tar -xzf $SOURCE.tar.gz ; tar -czf $TARGET -C $SOURCE/usr/bin/ . && cp $TARGET $WORKING_DIR/artifacts/${DRONE_BRANCH}"
  image: "casperlabs/buildenv:latest"
  when:
    branch:
    - dev
    - release-*
    - master
    event:
    - push
  depends_on:
  - package-sbt-artifacts-merge

- name: rsync-artifacts
  image: drillster/drone-rsync
  settings:
    delete: true
    hosts:
    - $REPO_HOST
    recursive: true
    source: "artifacts/${DRONE_BRANCH}"
    target: $REPO_PATH/
  environment:
    REPO_HOST:
      from_secret: repo_host
    REPO_PATH:
      from_secret: repo_path
    RSYNC_KEY:
      from_secret: rsync_key
    RSYNC_USER:
      from_secret: rsync_user
  when:
    branch:
    - dev
    - release-*
    - master
    event:
    - push
  depends_on:
  - package-sbt-artifacts-merge
  - package-ee

- name: docker-publish
  commands:
  - |
      echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
      if [ ! -z ${DRONE_TAG} ]; then
        REF=${DRONE_TAG}
      else
        REF=${DRONE_BRANCH}
      fi
      docker tag casperlabs/node:DRONE-${DRONE_BUILD_NUMBER} casperlabs/node:"$REF"
      docker tag casperlabs/execution-engine:DRONE-${DRONE_BUILD_NUMBER} casperlabs/execution-engine:"$REF"
      docker tag casperlabs/key-generator:DRONE-${DRONE_BUILD_NUMBER} casperlabs/key-generator:"$REF"
      docker tag casperlabs/explorer:DRONE-${DRONE_BUILD_NUMBER} casperlabs/explorer:"$REF"
      docker tag casperlabs/grpcwebproxy:DRONE-${DRONE_BUILD_NUMBER} casperlabs/grpcwebproxy:"$REF"
      docker push casperlabs/node:"$REF"
      docker push casperlabs/execution-engine:"$REF"
      docker push casperlabs/key-generator:"$REF"
      docker push casperlabs/explorer:"$REF"
      docker push casperlabs/grpcwebproxy:"$REF"
      if [ "${DRONE_BRANCH}" = "master" ]; then
        docker tag casperlabs/node:DRONE-${DRONE_BUILD_NUMBER} casperlabs/node:latest
        docker tag casperlabs/execution-engine:DRONE-${DRONE_BUILD_NUMBER} casperlabs/execution-engine:latest
        docker tag casperlabs/key-generator:DRONE-${DRONE_BUILD_NUMBER} casperlabs/key-generator:latest
        docker tag casperlabs/explorer:DRONE-${DRONE_BUILD_NUMBER} casperlabs/explorer:latest
        docker tag casperlabs/grpcwebproxy:DRONE-${DRONE_BUILD_NUMBER} casperlabs/grpcwebproxy:latest
        docker push casperlabs/node:latest
        docker push casperlabs/execution-engine:latest
        docker push casperlabs/key-generator:latest
        docker push casperlabs/explorer:latest
        docker push casperlabs/grpcwebproxy:latest
      fi
      echo "done"
  image: "casperlabs/buildenv:latest"
  environment:
    DOCKER_PASSWORD:
      from_secret: docker_password
    DOCKER_USERNAME:
      from_secret: docker_username
  volumes:
  - name: docker_sock
    path: "/var/run/docker.sock"
  when:
    branch:
    - dev
    - release-*
    - master
    event:
    - push
  depends_on:
  - docker-build-ee-merge
  - docker-key-gen-merge
  - docker-explorer-merge
  - docker-grpcwebproxy-merge
  - package-sbt-artifacts-merge

volumes:
- name: docker_sock
  host:
    path: "/var/run/docker.sock"
- name: temp
  host:
    path: "/tmp"

trigger:
  branch:
  - dev
  - master
  - "release-*"
  - "testing*"
  - trying
  - staging
  - "feature-*"

---
kind: pipeline
name: cleanup

clone:
  disable: true

steps:
- name: cleanup-docker-images
  commands:
  - "docker images --filter \"dangling=true\" -q --no-trunc | xargs --no-run-if-empty docker rmi -f || true"
  - "docker images | grep \"DRONE-${DRONE_BUILD_NUMBER}\" | awk '{print $3}' | xargs --no-run-if-empty docker rmi -f || true"
  - "docker images | grep DRONE | grep -E '([1-9][0-9]|[4-9]).hours' | awk '{print $3}' | sort -n | uniq | xargs --no-run-if-empty docker rmi -f || true"
  environment:
    _JAVA_OPTIONS: "-Xms2G -Xmx2G -XX:MaxMetaspaceSize=1G"
  image: "casperlabs/buildenv:latest"
  volumes:
  - name: docker_sock
    path: "/var/run/docker.sock"

volumes:
- name: docker_sock
  host:
    path: "/var/run/docker.sock"

trigger:
  status:
  - failure
  - success
  branch:
  - dev
  - master
  - "release-*"
  - "testing*"
  - trying
  - staging
  - "feature-*"

depends_on:
- build-bors-merge

---
kind: pipeline
name: rebuild-buildenv

clone:
  disable: true

steps:
- name: update-buildenv
  image: plugins/downstream
  settings:
    repositories:
    - "CasperLabs/buildenv@master"
  environment:
    DOWNSTREAM_SERVER:
      from_secret: downstream_server
    DOWNSTREAM_TOKEN:
      from_secret: downstream_token

trigger:
  status:
  - success
  branch:
  - dev
  event:
  - push

depends_on:
- build-bors-merge

---
kind: pipeline
name: failed-build-alert

clone:
  disable: true

steps:
- name: notify
  image: plugins/slack
  settings:
    webhook:
      from_secret: slack_webhook
    template:
    - |
      *{{ uppercasefirst build.status }}*
      Author: {{ build.author }}
      Drone Build: <{{ build.link }}|#{{ build.number }}>
      Commit Link: <https://github.com/{{repo.owner}}/{{repo.name}}/commit/{{build.commit}}|{{ truncate build.commit 10 }}>

trigger:
  status:
  - failure
  branch:
  - dev
  - master
  - "release-*"
  - "testing*"
  - trying
  - staging
  - "feature-*"

depends_on:
- build-bors-merge

---
kind: pipeline
name: on-tag

# Run only on tagged release version
steps:
- name: package-sbt-artifacts-tag
  commands:
  - "make build-client-contracts build-node-contracts"
  - "sbt update test node/debian:packageBin node/universal:packageZipTarball node/rpm:packageBin"
  - "mkdir -p artifacts/${DRONE_BRANCH}"
  - "cp node/target/casperlabs-node_*_all.deb node/target/universal/*.tgz artifacts/${DRONE_BRANCH}"
  - "cp node/target/rpm/RPMS/noarch/casperlabs-node-*.noarch.rpm artifacts/${DRONE_BRANCH}"
  environment:
    _JAVA_OPTIONS: "-Xms2G -Xmx2G -XX:MaxMetaspaceSize=1G"
  image: "casperlabs/buildenv:latest"
  volumes:
  - name: docker_sock
    path: "/var/run/docker.sock"
  when:
    ref:
    - refs/tags/v*

- name: package-ee-tag
  commands:
  - "mkdir -p artifacts/${DRONE_BRANCH}"
  - "make setup -C ./execution-engine"
  - "make cargo-package-all"
  - "cp execution-engine/target/system-contracts.tar.gz artifacts/${DRONE_BRANCH}"
  - "cp execution-engine/target/debian/casperlabs-engine-grpc-server_*.deb artifacts/${DRONE_BRANCH}"
  - "cp execution-engine/target/release/rpmbuild/RPMS/x86_64/casperlabs-engine-grpc-server-*.rpm artifacts/${DRONE_BRANCH}"
  - "WORKING_DIR=$(pwd) ; cd execution-engine/target/release/rpmbuild/SOURCES ; OS=$(uname -s | tr '[:upper:]' '[:lower:]') ; ARCH=$(uname -p) ; SOURCE=$(ls casperlabs-engine-grpc-server-*.tar.gz | sed \"s/.tar.gz//\") ; TARGET=$(ls $SOURCE*.tar.gz | sed \"s/.tar.gz/_\"$OS\"_\"$ARCH\".tar.gz/\") ; tar -xzf $SOURCE.tar.gz ; tar -czf $TARGET -C $SOURCE/usr/bin/ . && cp $TARGET $WORKING_DIR/artifacts/${DRONE_BRANCH}"
  image: "casperlabs/buildenv:latest"
  volumes:
  - name: docker_sock
    path: "/var/run/docker.sock"
  when:
    ref:
    - refs/tags/v*
  depends_on:
  - package-sbt-artifacts-tag

- name: build-docker-tag
  image: "casperlabs/buildenv:latest"
  commands:
  - "export DOCKER_LATEST_TAG=${DRONE_TAG}"
  - "make docker-build/node"
  - "make docker-build/execution-engine"
  - "make docker-build/key-generator"
  - "make docker-build/explorer"
  - "make docker-build/grpcwebproxy"
  volumes:
  - name: docker_sock
    path: "/var/run/docker.sock"
  when:
    ref:
    - refs/tags/v*
  depends_on:
    - package-ee-tag

- name: publish-docker-tag
  image: "casperlabs/buildenv:latest"
  failure: "ignore"
  environment:
    DOCKER_PASSWORD:
      from_secret: docker_password
    DOCKER_USERNAME:
      from_secret: docker_username
  volumes:
  - name: docker_sock
    path: "/var/run/docker.sock"
  commands:
  - |
      echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
      docker push casperlabs/node:"${DRONE_TAG}"
      docker push casperlabs/execution-engine:"${DRONE_TAG}"
      docker push casperlabs/key-generator:"${DRONE_TAG}"
      docker push casperlabs/explorer:"${DRONE_TAG}"
      docker push casperlabs/grpcwebproxy:"${DRONE_TAG}"
  when:
    ref:
    - refs/tags/v*
  depends_on:
    - build-docker-tag

- name: generate-metapackages
  commands:
  - "mkdir -p artifacts/${DRONE_BRANCH}"
  - "WORKING_DIR=$(pwd)/artifacts/${DRONE_BRANCH}/"
  - "cd $WORKING_DIR"
  - "THIS_VERSION=$(ls casperlabs-engine-grpc-server_*_amd64.deb | sed 's/casperlabs-engine-grpc-server_//' | sed 's/_amd64.deb//')"
  - "THIS_VERSION_MAJOR=$(echo $THIS_VERSION | cut -d '.' -f 1)"
  - "THIS_VERSION_MINOR=$(echo $THIS_VERSION | cut -d '.' -f 2,3)"
  - "cd /opt/bintray/artifacts"
  - "echo $THIS_VERSION"
  - "echo $THIS_VERSION_MINOR"
  - "echo $THIS_VERSION_MAJOR"
  - "sed -i 's/THIS_VERSION_MAJOR/'$THIS_VERSION_MAJOR'/g' rpmbuild/SPECS/casperlabs-all.spec"
  - "sed -i 's/THIS_VERSION_MINOR/'$THIS_VERSION_MINOR'/g' rpmbuild/SPECS/casperlabs-all.spec"
  - "sed -i 's/THIS_VERSION/'$THIS_VERSION'/g' rpmbuild/SPECS/casperlabs-all.spec"
  - "rpmbuild -bb rpmbuild/SPECS/casperlabs-all.spec -D '_topdir '$(pwd)'/rpmbuild' -D 'SRC '$(pwd)"
  - "sed -i 's/THIS_VERSION/'$THIS_VERSION'/g' /opt/bintray/artifacts/deb_build/casperlabs-all.cfg"
  - "equivs-build  deb_build/casperlabs-all.cfg"
  - "cp /opt/bintray/artifacts/casperlabs_*_all.deb $WORKING_DIR/"
  - "cp /opt/bintray/artifacts/rpmbuild/RPMS/x86_64/casperlabs-*.rpm $WORKING_DIR/"
  image: "casperlabs/buildenv:latest"
  volumes:
  - name: docker_sock
    path: "/var/run/docker.sock"
  when:
    ref:
    - refs/tags/v*
  depends_on:
  - package-ee-tag

- name: github_publish_release_artifacts
  settings:
    api_key:
      from_secret: github_token
    checksum:
    - sha256
    - md5
    files:
    - "artifacts/${DRONE_BRANCH}/*"
    prerelease:
    - true
  image: plugins/github-release
  when:
    ref:
    - refs/tags/v*
  depends_on:
  - generate-metapackages

- name: bintray-publish
  image: "casperlabs/buildenv:latest"
  failure: "ignore"
  script: |
    set -ex
    API_URL="https://api.bintray.com"
    UPLOAD_DIR=$(pwd)/artifacts/${DRONE_BRANCH}
    cd $UPLOAD_DIR
    echo "Uploading file to bintray:${DRONE_TAG} ..."
    echo -e "\nDEBIAN" && find . -maxdepth 1 -type f -iregex ".*\\.deb" -printf "%f\n" | xargs -I {} sh -c "echo Attempting to upload [{}] && curl -T {} -u$BINTRAY_USER:$BINTRAY_API_KEY $API_URL/content/casperlabs/debian/CasperLabs/${DRONE_TAG}/{} && echo"
    echo -e "\nRPMS" && find . -maxdepth 1 -type f -iregex ".*\\.rpm" -printf "%f\n" | xargs -I {} sh -c "echo Attempting to upload [{}] && curl -T {} -u$BINTRAY_USER:$BINTRAY_API_KEY $API_URL/content/casperlabs/rpm/CasperLabs/${DRONE_TAG}/{} && echo"
    # sleep 10 && echo -e "\nPublishing CL Packages on bintray..."
    # curl -X POST -u$BINTRAY_USER:$BINTRAY_API_KEY $API_URL/content/casperlabs/debian/CasperLabs/${DRONE_TAG}/publish
    # curl -X POST -u$BINTRAY_USER:$BINTRAY_API_KEY $API_URL/content/casperlabs/rpm/CasperLabs/${DRONE_TAG}/publish
    # sleep 10 && echo -e "\nGPG Signing CL Packages on bintray..."
    # curl -X POST -u$BINTRAY_USER:$BINTRAY_API_KEY -H "Content-Type: application/json" --data '{"private_key": "'$BINTRAY_PK'", "passphrase": "'$BINTRAY_GPG_PASSPHRASE'"}' $API_URL/gpg/casperlabs/debian/CasperLabs/versions/${DRONE_TAG}
    # curl -X POST -u$BINTRAY_USER:$BINTRAY_API_KEY -H "Content-Type: application/json" --data '{"private_key": "'$BINTRAY_PK'", "passphrase": "'$BINTRAY_GPG_PASSPHRASE'"}' $API_URL/gpg/casperlabs/rpm/CasperLabs/versions/${DRONE_TAG}
    # sleep 10 && echo -e "\nPublishing GPG Signatures on bintray..."
    # curl -X POST -u$BINTRAY_USER:$BINTRAY_API_KEY $API_URL/content/casperlabs/debian/CasperLabs/${DRONE_TAG}/publish
    # curl -X POST -u$BINTRAY_USER:$BINTRAY_API_KEY $API_URL/content/casperlabs/rpm/CasperLabs/${DRONE_TAG}/publish
    # sleep 10 && echo -e "\nCalculating repo metadata on bintray..."
    # curl -X POST -u$BINTRAY_USER:$BINTRAY_API_KEY -H "Content-Type: application/json" --data '{"private_key": "'$BINTRAY_PK'", "passphrase": "'$BINTRAY_GPG_PASSPHRASE'"}' $API_URL/calc_metadata/casperlabs/debian/CasperLabs/${DRONE_TAG}
    # curl -X POST -u$BINTRAY_USER:$BINTRAY_API_KEY -H "Content-Type: application/json" --data '{"private_key": "'$BINTRAY_PK'", "passphrase": "'$BINTRAY_GPG_PASSPHRASE'"}' $API_URL/calc_metadata/casperlabs/rpm/CasperLabs/${DRONE_TAG}
    TEMP_DEB_FILE=uploaded_contents_debian_${GIT_TAG}.json
    curl -s -X GET -u$BINTRAY_USER:$BINTRAY_API_KEY -H "Content-Type: application/json" $API_URL/packages/casperlabs/debian/CasperLabs/files?include_unpublished=1 > $TEMP_DEB_FILE.json
    cat $TEMP_DEB_FILE.json | jq -r '.[] | select (.version == "'${GIT_TAG}'") | .path'
    echo -e "\n\nUploaded files in [ $SUBJECT/$RPM_REPO/$PACKAGE_NAME/$GIT_TAG ]:"
    TEMP_RPM_FILE=uploaded_contents_rpm_${GIT_TAG}.json
    curl -s -X GET -u$BINTRAY_USER:$BINTRAY_API_KEY -H "Content-Type: application/json" $API_URL/packages/casperlabs/rpm/CasperLabs/files?include_unpublished=1 > $TEMP_RPM_FILE.json
    cat $TEMP_RPM_FILE.json | jq -r '.[] | select (.version == "'${GIT_TAG}'") | .path'
  environment:
    BINTRAY_USER:
      from_secret: bintray_username
    BINTRAY_API_KEY:
      from_secret: bintray_api_key
    BINTRAY_GPG_PASSPHRASE:
      from_secret: bintray_gpg_passphrase
    BINTRAY_PK:
      from_secret: bintray_private_key
  when:
    ref:
    - refs/tags/v*
  depends_on:
  - github_publish_release_artifacts

- name: npm-publish
  image: plugins/npm
  failure: "ignore"
  settings:
    username:
      from_secret: npm_user
    token:
      from_secret: npm_token
    email:
      from_secret: npm_email
    folder:
    - "execution-engine/contract-as"
    fail_on_version_conflict:
    - true
    access:
    - "public"
  depends_on:
  - github_publish_release_artifacts

volumes:
- name: docker_sock
  host:
    path: "/var/run/docker.sock"

trigger:
  ref:
  - refs/tags/v*

---
kind: pipeline
name: drone-docker-image-cleanup-cron

clone:
  disable: true

steps:
- name: drone-docker-image-cleanup
  image: casperlabs/buildenv:latest
  commands:
  - "docker images --filter \"dangling=true\" -q --no-trunc | xargs --no-run-if-empty docker rmi -f || true"
  - "docker images | grep DRONE | grep -E '([1-9][0-9]|[4-9]).hours' | awk '{print $3}' | sort -n | uniq | xargs --no-run-if-empty docker rmi -f || true"
  volumes:
  - name: docker_sock
    path: "/var/run/docker.sock"

volumes:
- name: docker_sock
  host:
    path: "/var/run/docker.sock"

trigger:
  cron: [ drone-docker-image-cleanup-cron ]

# Signature for Drone
---
kind: signature
hmac: aba74ddcedb4ac74f39f8884cd644c6f13eb4ed7f7226c7b9fefda17d0241af2

syntax = "proto3";

package io.casperlabs.ipc;

import "io/casperlabs/casper/consensus/state.proto";

message DeployCode {
  bytes code = 1; // wasm byte code
  bytes args = 2; // ABI-encoded arguments
}

message Bond {
    bytes validator_public_key = 1;
    io.casperlabs.casper.consensus.state.BigInt stake = 2;
}

message Deploy {
    // Public key of the account which is the context of the execution.
    bytes address = 1; // length 32 bytes
    DeployCode session = 3;
    DeployCode payment = 4;
    uint64 motes_transferred_in_payment = 5; // in units of Motes -- someday this will come from running payment code
    uint64 gas_price = 6; // in units of Mote / Gas
    uint64 nonce = 7;
    // Public keys used to sign this deploy, to be checked against the keys
    // associated with the account.
    repeated bytes authorization_keys = 8;
}

message ExecRequest {
    bytes parent_state_hash = 1;
    uint64 block_time = 2;
    repeated Deploy deploys = 3;
    io.casperlabs.casper.consensus.state.ProtocolVersion protocol_version = 4;
}

message ExecResponse {
    oneof result {
        ExecResult success = 1;
        RootNotFound missing_parent = 2;
    }
}

message ExecResult {
    repeated DeployResult deploy_results = 2;
}

message RootNotFound {
    bytes hash = 1;
}

message CommitRequest {
    bytes prestate_hash = 1;
    repeated TransformEntry effects = 2;
}

message CommitResult {
  bytes poststate_hash = 1;
  repeated Bond bonded_validators = 2;
}

message CommitResponse {
    oneof result {
        CommitResult success = 1;
        RootNotFound missing_prestate = 2;
        io.casperlabs.casper.consensus.state.Key key_not_found = 3;
        TypeMismatch type_mismatch = 4;
        PostEffectsError failed_transform = 5;
    }
}

// Describes operation that are allowed to do on a value under a key.
message Op {
    oneof op_instance {
        ReadOp read = 1;
        WriteOp write = 2;
        AddOp add = 3;
        NoOp noop = 4;
    }
}
message ReadOp {}
message WriteOp {}
message AddOp {}
message NoOp {}

// Final transformation to the value under the key.
// It's the outcome of applying all `op`s
message Transform {
    oneof transform_instance {
        TransformIdentity identity = 1;
        TransformAddInt32 add_i32 = 2;
        TransformAddUInt64 add_u64 = 3;
        TransformWrite write = 4;
        TransformAddKeys add_keys = 5;
        TransformFailure failure = 6;
        TransformAddBigInt add_big_int = 7;
    }
}

message TransformIdentity {}
message TransformAddInt32 {
    int32 value = 1;
}
message TransformAddUInt64 {
    uint64 value = 1;
}
message TransformAddBigInt {
    io.casperlabs.casper.consensus.state.BigInt value = 1;
}
message TransformAddKeys {
    repeated io.casperlabs.casper.consensus.state.NamedKey value = 1;
}
message TransformWrite {
    io.casperlabs.casper.consensus.state.Value value = 1;
}
message TransformFailure {
    oneof failure_instance {
        TypeMismatch type_mismatch = 1;
     }
}

//Errors which may occur while interacting with global state
message StorageError {
    oneof error_instance {
        BytesReprError bytes_repr = 1;
        RkvError rkv = 2;
    }
}
message TypeMismatch {
    string expected = 1;
    string found = 2;
}
message BytesReprError {
    oneof error_instance {
        EarlyEndOfStream early_end = 1;
        FormattingError formatting = 2;
        LeftOverBytes left_over = 3;
    }
}
message EarlyEndOfStream {}
message FormattingError {}
message LeftOverBytes {}
message RkvError {
    string error_msg = 1;
}

// Models key value pair of (key, op) entry.
// Required b/c protobuff doesn't support maps natively
message OpEntry {
    io.casperlabs.casper.consensus.state.Key key = 1;
    Op operation = 2;
}

message TransformEntry {
    io.casperlabs.casper.consensus.state.Key key = 1;
    Transform transform = 2;
}

// Returned by ExecutionEngine to consensus layer.
// (Map[Key, Op], Map[Key, Transform]) pair, describes how the deploy modifies the global io.casperlabs.casper.consensus.state.
// op_map and transform_map should be of equal lengths
message ExecutionEffect {
    repeated OpEntry op_map = 1;
    repeated TransformEntry transform_map = 2;
}

message DeployError {
    // Run out of gas during contract execution.
    message OutOfGasError {}

    // Error during contract execution.
    message ExecutionError {
        string message = 1;
    }

    oneof value {
        OutOfGasError gas_error = 1;
        ExecutionError exec_error = 2;
    }
}

message DeployResult {
    // Invalid nonce is not an error, it's also not a successful execution.
    // Deploys with invalid nonce are returned to the deploy buffer.
    message InvalidNonce {
        uint64 deploy_nonce = 1;
        uint64 expected_nonce = 2;
    }

    // Deploys that failed because of precondition failure that we can't charge for
    // (invalid key format, invalid key address, invalid Wasm deploys).
    message PreconditionFailure {
        string message = 1;
    }

    // Execution result has effects and/or errors.
    // Failed execution mutates the GlobalState by increasing the nonce and paying for the deploy.
    message ExecutionResult {
        ExecutionEffect effects = 1;
        DeployError error = 2;
        uint64 cost = 3;
    }

    oneof value {
        InvalidNonce invalid_nonce = 1;
        PreconditionFailure precondition_failure = 2;
        ExecutionResult execution_result = 3;
    }

}

//TODO: be more specific about errors
message PostEffectsError {
    string message = 1;
}

message QueryRequest {
    bytes state_hash = 1;
    io.casperlabs.casper.consensus.state.Key base_key = 2;
    repeated string path = 3;
}

message QueryResponse {
    oneof result {
        io.casperlabs.casper.consensus.state.Value success = 1;
        //TODO: ADT for errors
        string failure = 2;
    }
}


message ValidateResponse {
    message ValidateSuccess {};
    oneof result {
        ValidateSuccess success = 1;
        string failure = 2;
    }
}

message ValidateRequest {
    bytes session_code = 1;
    bytes payment_code = 2;
}

message GenesisRequest {
    // genesis account public key, length 32 bytes
    bytes address = 1;
    io.casperlabs.casper.consensus.state.BigInt initial_motes = 2;
    uint64 timestamp = 3;
    DeployCode mint_code = 4;
    DeployCode proof_of_stake_code = 5;
    repeated Bond genesis_validators = 6;
    io.casperlabs.casper.consensus.state.ProtocolVersion protocol_version = 7;
}

message GenesisResult {
    bytes poststate_hash = 1;
    ExecutionEffect effect = 2;
}

message GenesisDeployError {
    string message = 1;
}

message GenesisResponse {
    oneof result {
        GenesisResult success = 1;
        GenesisDeployError failed_deploy = 2;
    }
}


// Definition of the service.
// ExecutionEngine implements server part while Consensus implements client part.
service ExecutionEngineService {
    rpc exec (ExecRequest) returns (ExecResponse) {}
    rpc commit (CommitRequest) returns (CommitResponse) {}
    rpc query (QueryRequest) returns (QueryResponse) {}
    rpc validate (ValidateRequest) returns (ValidateResponse) {}
    rpc run_genesis (GenesisRequest) returns (GenesisResponse) {}
}

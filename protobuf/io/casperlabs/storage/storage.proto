syntax = "proto3";

package io.casperlabs.storage;

import "io/casperlabs/casper/consensus/consensus.proto";
import "io/casperlabs/ipc/ipc.proto";
import "scalapb/scalapb.proto";

// This is the content storing in BlockStorage, the reason why we need it is that,
// we take protobuf as the way to (de)serializer.
message BlockMsgWithTransform {
    io.casperlabs.casper.consensus.Block block_message = 1;
    repeated io.casperlabs.ipc.TransformEntry transform_entry = 2;
}

// Storage type for the DagStorage
message BlockMetadataInternal {
    // This message in mapped to a different Scala class because of protobuf's inability to create map<bytes, int64> for
    // bonds.
    option (scalapb.message).type = "io.casperlabs.models.BlockMetadata";

    bytes blockHash                       = 1;
    repeated bytes parents                = 2 [(scalapb.field).collection_type="collection.immutable.List"];
    bytes validator_public_key            = 3;
    repeated io.casperlabs.casper.consensus.Block.Justification justifications = 4 [(scalapb.field).collection_type="collection.immutable.List"];
    repeated io.casperlabs.casper.consensus.Bond bonds = 5 [(scalapb.field).collection_type="collection.immutable.List"];
    int64 rank                        = 6;
    int32 validator_block_seq_num     = 7;
}

